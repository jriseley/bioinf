import bioinf


def test_pattern_match_1():
    assert bioinf.PatternCount("ACAACTATGCATACTATCGGGAACTATCCT", "ACTAT") == 3


def test_pattern_match_2():
    assert bioinf.PatternCount("CGATATATCCATAG", "ATA") == 3


def test_pattern_match_3():
    assert bioinf.PatternCount("GCGCG", "GCG") == 2


def test_freq_map_1():
    d1 = {
        "CGA": 1,
        "GAT": 1,
        "ATA": 3,
        "TAT": 2,
        "ATC": 1,
        "TCC": 1,
        "CCA": 1,
        "CAT": 1,
        "TAG": 1,
    }
    assert bioinf.FrequencyMap("CGATATATCCATAG", 3) == d1


def test_frequent_words_1():
    Text = "ACGTTGCATGTCGCATGATGCATGAGAGCT"
    k = 4
    assert set(bioinf.FrequentWords(Text, k)) == {"CATG", "GCAT"}

def test_frequent_words_2():
    Text = "TGGTAGCGACGTTGGTCCCGCCGCTTGAGAATCTGGATGAACATAAGCTCCCACTTGGCTTATTCAGAGAACTGGTCAACACTTGTCTCTCCCAGCCAGGTCTGACCACCGGGCAACTTTTAGAGCACTATCGTGGTACAAATAATGCTGCCAC"
    k = 3
    assert set(bioinf.FrequentWords(Text, k)) == {"TGG"}

def test_frequent_words_3():
    Text = "CAGTGGCAGATGACATTTTGCTGGTCGACTGGTTACAACAACGCCTGGGGCTTTTGAGCAACGAGACTTTTCAATGTTGCACCGTTTGCTGCATGATATTGAAAACAATATCACCAAATAAATAACGCCTTAGTAAGTAGCTTTT"
    k = 4
    assert set(bioinf.FrequentWords(Text, k)) == {"TTTT"}


def test_frequent_words_4():
	Text = "ATACAATTACAGTCTGGAACCGGATGAACTGGCCGCAGGTTAACAACAGAGTTGCCAGGCACTGCCGCTGACCAGCAACAACAACAATGACTTTGACGCGAAGGGGATGGCATGAGCGAACTGATCGTCAGCCGTCAGCAACGAGTATTGTTGCTGACCCTTAACAATCCCGCCGCACGTAATGCGCTAACTAATGCCCTGCTG"
	k = 5
	assert set(bioinf.FrequentWords(Text, k)) == {"AACAA"}


def test_frequent_words_5():
	Text = "CCAGCGGGGGTTGATGCTCTGGGGGTCACAAGATTGCATTTTTATGGGGTTGCAAAAATGTTTTTTACGGCAGATTCATTTAAAATGCCCACTGGCTGGAGACATAGCCCGGATGCGCGTCTTTTACAACGTATTGCGGGGTAAAATCGTAGATGTTTTAAAATAGGCGTAAC"
	k = 5
	assert set(bioinf.FrequentWords(Text, k)) == {"AAAAT", "GGGGT", "TTTTA"}

def test_valid_nucelotide_1():
	Text = "CCAGCGGGGGTTGATGCTCTGGGGGTCACAAGATTGCATTTTTATGGGGTTGCAAAAATGTTTTTTACGGCAGATTCATTTAAAATGCCCACTGGCTGGAGACATAGCCCGGATGCGCGTCTTTTACAACGTATTGCGGGGTAAAATCGTAGATGTTTTAAAATAGGCGTAAC"
	assert bioinf.validNucleotide(Text)

def test_valid_nucleotide_2():
	Text = "CCAGCGGGGGTTGATGCTCTGGGGGTCACAAGATTGCATTTTTATGGGGTTGCAAAAATGTTTTTTACGGCAGATTCATTTAAAATGCCCACTGGCTGGAGACATAGCCCGGATGCGCGTCTTTTACAACGTATTGCGGGGTAAAATCGTAGATGTTTTAAAATAGGCGTAAC"
	assert bioinf.validNucleotide(Text.lower())

def test_complement_1():
	Pattern = "CCAGC"
	assert bioinf.Complement(Pattern)=="GGTCG"